"use client";

import { useState } from "react";
import { supabase } from "@/lib/supabase";

type Phase = "‡πÄ‡∏î‡∏¥‡∏ô" | "‡∏™‡∏π‡πâ" | "‡∏™‡∏£‡πâ‡∏≤‡∏á";
interface FightEntry {
  house: string;
  count: number;
}
const phaseOrder: Record<Phase, number> = {
  ‡πÄ‡∏î‡∏¥‡∏ô: 1,
  ‡∏™‡∏π‡πâ: 2,
  ‡∏™‡∏£‡πâ‡∏≤‡∏á: 3,
};

const ALL_NODE_IDS = Array.from({ length: 60 }, (_, i) => (i + 1).toString());

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô
function convertHouseName(house: string): string {
  const match = house.trim().match(/‡∏ö‡πâ‡∏≤‡∏ô\s*0*(\d+)/);
  if (match) {
    return `B${parseInt(match[1], 10)}`;
  }
  return house.trim(); // fallback
}

export default function CreateSnapshotMoveButton() {
  const [round, setRound] = useState<number>(1);
  const [loading, setLoading] = useState(false);

  const handleSnapshot = async () => {
    setLoading(true);

    // 1. ‡∏î‡∏∂‡∏á snapshot ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô)
    const { data: pastSnapshots, error: fetchError } = await supabase
      .from("snapshots")
      .select("node, round, selectedcar, tower, towerOwner")
      .order("round", { ascending: false });

    if (fetchError) {
      console.error("Error fetching snapshots", fetchError);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á snapshot ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ");
      setLoading(false);
      return;
    }

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏Ç‡∏≠‡∏á snapshot ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ node
    const latestMap = new Map<
      string,
      { selectedcar: string; tower: boolean; towerOwner: string }
    >();

    for (const snap of pastSnapshots || []) {
      const nodeId = String(snap.node);
      if (!latestMap.has(nodeId)) {
        latestMap.set(nodeId, {
          selectedcar: snap.selectedcar || "",
          tower: snap.tower || false,
          towerOwner: snap.towerOwner || "",
        });
      }
    }

    // 3. ‡∏î‡∏∂‡∏á moves ‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
    const { data: moves, error: moveError } = await supabase
      .from("moves")
      .select("house, node, count")
      .eq("round", round);

    if (moveError || !moves) {
      console.error("Error fetching moves", moveError);
      alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• moves");
      setLoading(false);
      return;
    }

    // 4. ‡∏£‡∏ß‡∏° moves ‡∏ï‡∏≤‡∏° node
    const nodeMap: Record<string, FightEntry[]> = {};
    for (const move of moves) {
      const nodeId = String(move.node);
      if (!nodeMap[nodeId]) nodeMap[nodeId] = [];
      nodeMap[nodeId].push({
        house: move.house.trim(),
        count: move.count,
      });
    }

    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á snapshotData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
    const snapshotData: any[] = [];

    for (const node in nodeMap) {
      const entries = nodeMap[node];
      const previous = latestMap.get(node);

      if (entries.length > 1) {
        // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
        const fightEntries = entries.map((entry) => ({
          house: convertHouseName(entry.house),
          count: entry.count,
        }));
        snapshotData.push({
          node,
          phase: "‡πÄ‡∏î‡∏¥‡∏ô",
          round,
          value: null,
          selectedcar: "",
          tower: previous?.tower || false,
          ship: [],
          fight: fightEntries,
          towerOwner: previous?.towerOwner || "",
        });
      } else {
        const entry = entries[0];
        snapshotData.push({
          node,
          phase: "‡πÄ‡∏î‡∏¥‡∏ô",
          round,
          value: entry.count,
          selectedcar: convertHouseName(entry.house),
          tower: previous?.tower || false,
          ship: [],
          fight: [],
          towerOwner: previous?.towerOwner || "",
        });
      }
    }

    // 6. ‡πÄ‡∏ï‡∏¥‡∏° node ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ move ‡πÅ‡∏ï‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
    for (const nodeId of ALL_NODE_IDS) {
      if (!snapshotData.find((s) => s.node === nodeId)) {
        const previous = latestMap.get(nodeId);
        snapshotData.push({
          node: nodeId,
          phase: "‡πÄ‡∏î‡∏¥‡∏ô",
          round,
          value: null,
          selectedcar: previous?.selectedcar || "",
          tower: previous?.tower || false,
          ship: [],
          fight: [],
          towerOwner: previous?.towerOwner || "",
        });
      }
    }

    // 7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å snapshot
    const { error: insertError } = await supabase
      .from("snapshots")
      .insert(snapshotData);

    if (insertError) {
      console.error("Insert error", insertError);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á snapshot");
    } else {
      alert("‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    setLoading(false);
  };

  //üß±üß±üß±üß±üß±üß±üß±üß±fight phaseüß±üß±üß±üß±üß±üß±üß±üß±
  const handleFightPhase = async () => {
    setLoading(true);

    // 1. ‡∏î‡∏∂‡∏á snapshot ‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (phase ‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ)
    const { data: previousSnapshots, error: snapError } = await supabase
      .from("snapshots")
      .select("node, selectedcar, towerOwner")
      .eq("round", round - 1);

    if (snapError) {
      console.error("Error fetching previous snapshots", snapError);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á snapshot ‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ");
      setLoading(false);
      return;
    }

    const previousMap = new Map<
      string,
      { selectedcar: string; towerOwner: string | null }
    >();
    previousSnapshots?.forEach((s) => {
      previousMap.set(s.node, {
        selectedcar: s.selectedcar || "",
        towerOwner: s.towerOwner || null,
      });
    });

    // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fight ‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
    const { data: fightData, error: fightError } = await supabase
      .from("fight")
      .select("node, house, count, tower")
      .eq("round", round);

    if (fightError) {
      console.error("Error fetching fight data", fightError);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fight ‡πÑ‡∏î‡πâ");
      setLoading(false);
      return;
    }

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á snapshot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö phase "‡∏™‡∏π‡πâ"
    const fightSnapshots = fightData
      .filter((row) => row.node && row.node !== "0")
      .map((row) => {
        const nodeId = String(row.node);
        const tower = !!row.tower;
        const previous = previousMap.get(nodeId);

        return {
          node: nodeId,
          phase: "‡∏™‡∏π‡πâ",
          round,
          value: row.count,
          selectedcar: row.house?.trim() || previous?.selectedcar || "",
          tower,
          ship: [],
          fight: null,
          towerOwner: tower ? previous?.towerOwner || null : null,
        };
      });

    // 4. ‡πÄ‡∏û‡∏¥‡πà‡∏° snapshot phase "‡∏™‡∏π‡πâ"
    const { error: insertError } = await supabase
      .from("snapshots")
      .insert(fightSnapshots);

    if (insertError) {
      console.error("Insert error", insertError);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot Phase ‡∏™‡∏π‡πâ");
    } else {
      alert("‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot Phase ‡∏™‡∏π‡πâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    setLoading(false);
  };
  //üß±üß±üß±üß±üß±üß±üß±üß± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≠‡∏° phaseüß±üß±üß±üß±üß±üß±üß±üß±
  const handleBuildPhase = async () => {
    setLoading(true);

    // 1. ‡∏î‡∏∂‡∏á snapshot ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏≠‡∏ö)
    const { data: allSnapshots, error: snapError } = await supabase
      .from("snapshots")
      .select(
        "node, phase, selectedcar, tower, towerOwner, fight, value, round"
      );

    if (snapError || !allSnapshots) {
      console.error("Error fetching snapshots", snapError);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á snapshot ‡πÑ‡∏î‡πâ");
      setLoading(false);
      return;
    }

    // 2. ‡∏´‡∏≤ snapshot ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ node ‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞ phase ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏™‡∏£‡πâ‡∏≤‡∏á < ‡πÄ‡∏î‡∏¥‡∏ô < ‡∏™‡∏π‡πâ)
    const phaseOrder = { ‡∏™‡∏£‡πâ‡∏≤‡∏á: 1, ‡πÄ‡∏î‡∏¥‡∏ô: 2, ‡∏™‡∏π‡πâ: 3 };
    const latestByNode = new Map<string, any>();

    allSnapshots.forEach((snap) => {
      const nodeId = String(snap.node);
      const existing = latestByNode.get(nodeId);

      if (
        !existing ||
        snap.round > existing.round ||
        (snap.round === existing.round &&
          (phaseOrder[snap.phase as keyof typeof phaseOrder] ?? 0) >
            (phaseOrder[existing.phase as keyof typeof phaseOrder] ?? 0))
      ) {
        latestByNode.set(nodeId, snap);
      }
    });

    // 3. ‡∏î‡∏∂‡∏á purchases ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á round ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const { data: purchaseData, error: purchaseError } = await supabase
      .from("purchases")
      .select("node, house")
      .eq("round", round)
      .eq("type", "fort");

    if (purchaseError) {
      console.error("Error fetching purchases", purchaseError);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• purchases ‡πÑ‡∏î‡πâ");
      setLoading(false);
      return;
    }

    const purchaseMap = new Map<string, string>();
    purchaseData?.forEach((p) => {
      const nodeId = String(p.node);
      if (nodeId && nodeId !== "0") {
        purchaseMap.set(nodeId, p.house.trim());
      }
    });

    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á snapshot ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö phase '‡∏™‡∏£‡πâ‡∏≤‡∏á'
    const buildSnapshots = Array.from(latestByNode.entries()).map(
      ([nodeId, snap]) => {
        const overrideHouse = purchaseMap.get(nodeId);
        const isTower = overrideHouse ? true : snap.tower || false;

        return {
          node: nodeId,
          phase: "‡∏™‡∏£‡πâ‡∏≤‡∏á",
          round, // ‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          selectedcar: snap.selectedcar || "",
          tower: isTower,
          towerOwner: isTower ? overrideHouse || snap.towerOwner : null,
          fight: snap.fight || [],
          value: snap.value ?? null,
          ship: [],
        };
      }
    );

    // 5. ‡πÅ‡∏ó‡∏£‡∏Å snapshot
    const { error: insertError } = await supabase
      .from("snapshots")
      .insert(buildSnapshots);

    if (insertError) {
      console.error("Insert error", insertError);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot Phase ‡∏™‡∏£‡πâ‡∏≤‡∏á");
    } else {
      alert("‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot Phase ‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    setLoading(false);
  };
  ////////////////
  const reviveHouseMap = new Map<string, string>();

  const handleRevivePhase = async () => {
    setLoading(true);

    // 1. ‡∏î‡∏∂‡∏á snapshots ‡∏ó‡∏µ‡πà round <= ‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const { data: prevSnapshots, error: snapError } = await supabase
      .from("snapshots")
      .select(
        "node, round, phase, selectedcar, tower, towerOwner, fight, value"
      )
      .lte("round", round);

    if (snapError || !prevSnapshots || prevSnapshots.length === 0) {
      console.error("Error fetching previous snapshots", snapError);
      alert("‡πÑ‡∏°‡πà‡∏û‡∏ö snapshot ‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤");
      setLoading(false);
      return;
    }

    // 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å snapshot ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ node
    const latestByNode = new Map<string, (typeof prevSnapshots)[0]>();

    prevSnapshots.forEach((snap) => {
      const nodeId = String(snap.node);
      const phase = snap.phase as Phase;
      const existing = latestByNode.get(nodeId);

      if (!phaseOrder[phase]) return;

      if (
        !existing ||
        snap.round > existing.round ||
        (snap.round === existing.round &&
          phaseOrder[phase] > phaseOrder[existing.phase as Phase])
      ) {
        latestByNode.set(nodeId, snap);
      }
    });

    // 3. ‡∏î‡∏∂‡∏á purchases ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ type = "revive"
    const { data: revivePurchases, error: purchaseError } = await supabase
      .from("purchases")
      .select("node, count, house")
      .eq("round", round)
      .eq("type", "revive");

    if (purchaseError) {
      console.error("Error fetching revive purchases", purchaseError);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÑ‡∏î‡πâ");
      setLoading(false);
      return;
    }

    const reviveMap = new Map<string, number>();
    revivePurchases.forEach((p) => {
      const nodeId = String(p.node);
      if (nodeId && nodeId !== "0" && p.count > 0) {
        reviveMap.set(nodeId, (reviveMap.get(nodeId) || 0) + p.count);
        reviveHouseMap.set(nodeId, p.house); // ‡πÄ‡∏Å‡πá‡∏ö house ‡∏î‡πâ‡∏ß‡∏¢
      }
    });

    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á snapshot ‡πÉ‡∏´‡∏°‡πà (phase = "‡∏ä‡∏∏‡∏ö")
    const newSnapshots = Array.from(latestByNode.entries()).map(
      ([nodeId, snap]) => {
        const reviveValue = reviveMap.get(nodeId) || 0;
        return {
          node: nodeId,
          phase: "‡∏ä‡∏∏‡∏ö",
          round,
          selectedcar:
            reviveValue > 0
              ? convertHouseName(reviveHouseMap.get(nodeId) || "")
              : snap.selectedcar || "",
          tower: snap.tower,
          towerOwner: snap.towerOwner,
          fight: snap.fight || [],
          value: (snap.value || 0) + reviveValue,
          ship: [],
        };
      }
    );

    // 5. ‡πÅ‡∏ó‡∏£‡∏Å snapshot ‡πÉ‡∏´‡∏°‡πà
    const { error: insertError } = await supabase
      .from("snapshots")
      .insert(newSnapshots);

    if (insertError) {
      console.error("Insert error", insertError);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot Phase ‡∏ä‡∏∏‡∏ö");
    } else {
      alert("‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot Phase ‡∏ä‡∏∏‡∏ö ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    setLoading(false);
  };

  return (
    <div className="p-4 border rounded shadow max-w-md">
      <label className="mr-2 font-semibold">‡∏£‡∏≠‡∏ö:</label>
      <input
        type="number"
        value={round}
        onChange={(e) => setRound(Number(e.target.value))}
        className="border px-2 py-1 mr-4 w-24"
        min={0}
      />
      <button
        onClick={handleBuildPhase}
        disabled={loading}
        className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 mt-2"
      >
        {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á..." : "‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot Phase ‡∏™‡∏£‡πâ‡∏≤‡∏á"}
      </button>
      <button
        onClick={handleRevivePhase}
        disabled={loading}
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á..." : "‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot Phase ‡∏ä‡∏∏‡∏ö"}
      </button>
      <button
        onClick={handleSnapshot}
        disabled={loading}
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á..." : "‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot Phase ‡πÄ‡∏î‡∏¥‡∏ô"}
      </button>
      <button
        onClick={handleFightPhase}
        disabled={loading}
        className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 mt-4"
      >
        {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á..." : "‡∏™‡∏£‡πâ‡∏≤‡∏á Snapshot Phase ‡∏™‡∏π‡πâ"}
      </button>
    </div>
  );
}
