"use client";
import { useState } from "react";
import { supabase } from "@/lib/supabase";
import { useEffect } from "react";
import { Button } from "../ui/button";

type Item = { node: number; count: number };

export default function NewPurchaseForm({
  house,
  houseT,
}: {
  house: string;
  houseT: string;
}) {
  const [round, setRound] = useState(1);
  const [forts, setForts] = useState<Item[]>([{ node: 1, count: 0 }]);
  const [ships, setShips] = useState<Item[]>([{ node: 1, count: 0 }]);
  const [revives, setRevives] = useState<Item[]>([{ node: 1, count: 0 }]);
  const [message, setMessage] = useState("");

  const addItem = (
    setter: React.Dispatch<React.SetStateAction<Item[]>>,
    label: string
  ) => {
    setter((prev) => [
      ...prev,
      { node: 1, count: label.includes("‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≠‡∏°") ? 1 : 0 },
    ]);
  };

  const removeItem = (
    index: number,
    setter: React.Dispatch<React.SetStateAction<Item[]>>
  ) => {
    setter((prev) => prev.filter((_, i) => i !== index));
  };

  const handleChange = (
    index: number,
    key: "node" | "count",
    value: number,
    setter: React.Dispatch<React.SetStateAction<Item[]>>
  ) => {
    setter((prev) => {
      const updated = [...prev];
      updated[index][key] = value;
      return updated;
    });
  };

  const hasDuplicateNode = (items: Item[]) => {
    const nodes = items.map((i) => i.node);
    return new Set(nodes).size !== nodes.length;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (hasDuplicateNode(forts)) {
      setMessage("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≠‡∏°: ‡∏°‡∏µ Node ‡∏ã‡πâ‡∏≥");
      return;
    }
    if (hasDuplicateNode(ships)) {
      setMessage("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡∏≠: ‡∏°‡∏µ Node ‡∏ã‡πâ‡∏≥");
      return;
    }
    if (hasDuplicateNode(revives)) {
      setMessage("‚ùå ‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: ‡∏°‡∏µ Node ‡∏ã‡πâ‡∏≥");
      return;
    }
    const hasZeroCount = (items: Item[]) => items.some((i) => i.count <= 0);

    if (hasZeroCount(forts)) {
      setMessage("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≠‡∏°: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏•‡∏ö‡∏≠‡∏≠‡∏Å");
      return;
    }
    if (hasZeroCount(ships)) {
      setMessage("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡∏≠: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏•‡∏ö‡∏≠‡∏≠‡∏Å");
      return;
    }
    if (hasZeroCount(revives)) {
      setMessage("‚ùå ‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏•‡∏ö‡∏≠‡∏≠‡∏Å");
      return;
    }

    const { data: existing } = await supabase
      .from("purchases")
      .select("*")
      .eq("house", house)
      .eq("round", round);

    if (existing && existing.length > 0) {
      setMessage(`‚ùå ${house} ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß`);
      return;
    }

    const insertData = [
      ...forts.map((item) => ({
        type: "fort",
        node: item.node,
        count: item.count,
        round,
        house,
      })),
      ...ships.map((item) => ({
        type: "ship",
        node: item.node,
        count: item.count,
        round,
        house,
      })),
      ...revives.map((item) => ({
        type: "revive",
        node: item.node,
        count: item.count,
        round,
        house,
      })),
    ];

    const { error } = await supabase.from("purchases").insert(insertData);

    setMessage(error ? "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" : "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  };

  const renderForm = (
    label: string,
    items: Item[],
    setter: React.Dispatch<React.SetStateAction<Item[]>>,
    prefix: string
  ) => (
    <div className="border p-4 rounded space-y-2">
      <h3 className="font-bold">{label}</h3>
      <div>
        <label htmlFor={`${prefix}-round-select`}>‡∏£‡∏≠‡∏ö: </label>{" "}
        <select
          id={`${prefix}-round-select`}
          value={round}
          onChange={(e) => setRound(+e.target.value)}
          className="border px-2"
        >
          {Array.from({ length: 50 }, (_, i) => (
            <option key={i + 1} value={i + 1}>
              {i + 1}
            </option>
          ))}
        </select>
      </div>
      {items.map((item, index) => (
        <div key={index} className="flex gap-2 items-center">
          <div>
            <label htmlFor={`${prefix}-node-select-${index}`}>
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Node:{" "}
            </label>{" "}
            <select
              id={`${prefix}-node-select-${index}`}
              value={item.node > 0 ? item.node : ""}
              onChange={(e) =>
                handleChange(index, "node", +e.target.value, setter)
              }
              className="border px-2 py-1"
            >
              <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
              {(label.includes("‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï")
                ? validReviveNodes
                : Array.from({ length: 60 }, (_, i) => i + 1)
              ).map((nodeId) => (
                <option key={nodeId} value={nodeId}>
                  {nodeId}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label htmlFor={`${prefix}-count-select-${index}`}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: </label>{" "}
            {label.includes("‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≠‡∏°") ? (
              <>
                <span className="px-2 py-1 border rounded bg-gray-100">1</span>
                <input type="hidden" value={1} onChange={() => {}} />
              </>
            ) : (
              <select
                id={`${prefix}-count-select-${index}`}
                value={item.count > 0 ? item.count : ""}
                onChange={(e) =>
                  handleChange(index, "count", +e.target.value, setter)
                }
                className="border px-2 py-1"
              >
                <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
                {Array.from({ length: 20 }, (_, i) => (
                  <option key={i + 1} value={i + 1}>
                    {label.includes("‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡∏≠")
                      ? `${i + 1} ‡∏•‡∏≥`
                      : label.includes("‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï")
                        ? `${i + 1} ‡∏Ñ‡∏ô`
                        : i + 1}
                  </option>
                ))}
              </select>
            )}
          </div>

          <button
            type="button"
            onClick={() => removeItem(index, setter)}
            className="text-red-500"
          >
            ‡∏•‡∏ö
          </button>
        </div>
      ))}
      <button
        type="button"
        onClick={() => addItem(setter, label)}
        className="bg-green-500 text-white px-4 py-1 rounded"
      >
        ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Node
      </button>
    </div>
  );
  //   ‡πÄ‡∏â‡∏û‡∏≤‡∏∞node ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡πâ‡∏≠‡∏°
  const refreshNodes = async () => {
    setMessage("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...");
    const { data, error } = await supabase
      .from("nodes")
      .select("id, towerOwner");

    if (!error && data) {
      setAllNodes(data);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï node ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á houseT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ revive
      const valid = data
        .filter((node) => node.towerOwner === houseT)
        .map((node) => +node.id);
      setValidReviveNodes(valid);

      setMessage("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
      setMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• node ‡πÑ‡∏î‡πâ");
    }
  };

  const [allNodes, setAllNodes] = useState<
    { id: number; towerOwner: string }[]
  >([]);
  const [validReviveNodes, setValidReviveNodes] = useState<number[]>([]);
  useEffect(() => {
    refreshNodes();
  }, [houseT]);

  useEffect(() => {
    const fetchValidReviveNodes = async () => {
      const { data, error } = await supabase
        .from("nodes")
        .select("id, towerOwner")
        .eq("towerOwner", houseT);

      if (!error && data) {
        setValidReviveNodes(data.map((node) => +node.id));
      }
    };

    fetchValidReviveNodes();
  }, [house]);

  return (
    <form onSubmit={handleSubmit} className="space-y-4 w-[500px]">
      <Button type="button" onClick={refreshNodes} className="text-sm ml-2">
        üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      </Button>
      {message && <p>{message}</p>}

      <div className="text-red-600">
        <li>
          ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≠‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà<span className="font-bold"> node ‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á</span>
        </li>
        <li>1 node ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏õ‡πâ‡∏≠‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß</li>
      </div>
      {renderForm("‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≠‡∏°", forts, setForts, "fort")}
      <div className="text-red-600">
        <li>
          ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà
          <span className="font-bold"> node ‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á</span>‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        </li>
      </div>
      {renderForm("‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡∏≠", ships, setShips, "ship")}
      <div className="text-red-600">
        <li>‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏ö</li>
        <li>
          ‡∏ä‡∏∏‡∏ö‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà <span className="font-bold">node ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡πâ‡∏≠‡∏°</span>
          ‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        </li>
      </div>
      {renderForm("‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", revives, setRevives, "revive")}

      <div>‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∏‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏î "‡∏•‡∏ö" ‡∏≠‡∏≠‡∏Å</div>
      <div>Node ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ô‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ</div>
      <div className="text-red-700">
        ‡πÉ‡∏ô 1 ‡∏£‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á
        <span className="font-bold text-xl">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</span>
        <div>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
      </div>
      <button
        type="submit"
        className="bg-blue-500 text-white px-4 py-2 rounded"
      >
        ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      </button>
      {message && <p>{message}</p>}
      <div>
        ‡∏Å‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        ‡∏Å‡∏î‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°
        <span className="font-bold text-xl">‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á</span>{" "}
        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏£‡∏µ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ï‡∏≤‡∏ü
      </div>
    </form>
  );
}
