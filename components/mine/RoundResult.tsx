"use client";
import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase";

export default function RoundResult() {
  const [round, setRound] = useState(1);

  // moves = ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô (house, node, count)
  const [moves, setMoves] = useState<any[]>([]);

  // boats = ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏∑‡∏≠ (house, node, boat)
  const [boats, setBoats] = useState<any[]>([]);

  const [houses, setHouses] = useState<string[]>([]);
  const [nodes, setNodes] = useState<number[]>([]);
  const [matrix, setMatrix] = useState<Record<number, Record<string, number>>>(
    {}
  );

  // Matrix ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡∏≠
  const [boatMatrix, setBoatMatrix] = useState<
    Record<number, { house: string; boat: number }[]>
  >({});

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô + ‡∏™‡∏π‡πâ
  const [result, setResult] = useState<any[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• moves (‡πÄ‡∏î‡∏¥‡∏ô)
      const { data: moveData } = await supabase
        .from("moves")
        .select("house, node, count")
        .eq("round", round);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• boats (‡πÄ‡∏£‡∏∑‡∏≠)
      const { data: boatData } = await supabase
        .from("ship")
        .select("house, node, boat")
        .eq("round", round);
      // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (1-12)
      const allHouses = Array.from(
        { length: 12 },
        (_, i) => `‡∏ö‡πâ‡∏≤‡∏ô ${String(i + 1).padStart(2, "0")}`
      );
      setHouses(allHouses);

      const uniqueNodes = Array.from({ length: 60 }, (_, i) => i + 1);
      setNodes(uniqueNodes);

      // ‚úÖ reset matrix ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      const matrixData: Record<number, Record<string, number>> = {};
      uniqueNodes.forEach((node) => {
        matrixData[node] = {};
        allHouses.forEach((house) => {
          matrixData[node][house] = 0;
        });
      });

      moveData?.forEach((d) => {
        if (matrixData[d.node]) {
          matrixData[d.node][d.house] = d.count;
        }
      });

      setMatrix(matrixData);
      setMoves(moveData || []);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á matrix ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ node
      const boatDataByNode: Record<number, { house: string; boat: number }[]> =
        {};
      uniqueNodes.forEach((node) => {
        boatDataByNode[node] = [];
      });
      boatData?.forEach((b) => {
        if (!boatDataByNode[b.node]) boatDataByNode[b.node] = [];
        boatDataByNode[b.node].push({ house: b.house, boat: b.boat });
      });

      setBoatMatrix(boatDataByNode);
      setBoats(boatData || []);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏π‡πâ
      const nodeMap: Record<number, { house: string; count: number }[]> = {};
      moveData?.forEach((move) => {
        if (!nodeMap[move.node]) nodeMap[move.node] = [];
        nodeMap[move.node].push({ house: move.house, count: move.count });
      });

      const output = Object.entries(nodeMap).map(([node, moves]) => {
        if (moves.length > 1) {
          return {
            node: +node,
            type: "fight",
            houses: moves.map((m) => ({ house: m.house, count: m.count })),
          };
        } else {
          return {
            node: +node,
            type: "move",
            house: moves[0].house,
            count: moves[0].count,
          };
        }
      });

      setResult(output);
    };

    fetchData();
  }, [round]);

  // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏ô
  const handleCopyPeople = () => {
    let text = "";
    nodes.forEach((node) => {
      const row = houses
        .map((house) =>
          matrix[node]?.[house] === 0 ? "" : matrix[node]?.[house].toString()
        )
        .join("\t");
      text += row + "\n";
    });
    navigator.clipboard.writeText(text).then(() => {
      alert("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
    });
  };

  // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡∏≠
  const handleCopyBoat = () => {
    let text = "";
    nodes.forEach((node) => {
      const boatsAtNode = boatMatrix[node] || [];
      if (boatsAtNode.length > 0) {
        boatsAtNode.forEach(({ boat }) => {
          text += boat + "\n"; // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡∏≠
        });
      } else {
        text += "\n"; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
      }
    });
    navigator.clipboard.writeText(text).then(() => {
      alert("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
    });
  };

  // ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô
  const formatHouseName = (houseNumber: number) => {
    return `B${houseNumber}`;
  };

  // ‡∏õ‡∏∏‡πà‡∏° Reset ‡πÅ‡∏•‡∏∞ Update Nodes (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  const handleResetAndUpdate = async () => {
    try {
      // ‚úÖ 1. Reset (‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤ ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô top, left, id, tower, ship, towerOwner)
      const { error: resetError } = await supabase
        .from("nodes")
        .update({
          value: null,
          selectedcar: null,
          // tower: false,
          // ship: null,
          fight: null,
          // towerOwner: null,
        })
        .neq("id", ""); // update ‡∏ó‡∏∏‡∏Å row

      if (resetError) throw resetError;

      // ‚úÖ 2. ‡∏î‡∏∂‡∏á moves ‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const { data: movesData, error: movesError } = await supabase
        .from("moves")
        .select("house, node, count")
        .eq("round", round);

      if (movesError) throw movesError;

      // ‚úÖ 3. group ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° node
      const nodeMap: Record<string, { house: string; count: number }[]> = {};
      movesData?.forEach((move) => {
        const nodeId = String(move.node);
        if (!nodeMap[nodeId]) nodeMap[nodeId] = [];
        nodeMap[nodeId].push({ house: move.house, count: move.count });
      });

      // ‚úÖ 4. update nodes ‡∏ó‡∏µ‡∏•‡∏∞ node
      for (const [nodeId, moves] of Object.entries(nodeMap)) {
        if (moves.length > 1) {
          // üî• fight ‚Üí json array ‡∏Ç‡∏≠‡∏á {house, count}
          const fightData = moves.map((m) => ({
            house: formatHouseName(Number(m.house.slice(-2))),
            count: m.count,
          }));
          const { error: fightError } = await supabase
            .from("nodes")
            .update({ fight: fightData })
            .eq("id", nodeId);
          if (fightError) throw fightError;
        } else {
          // ‚úÖ move ‡∏õ‡∏Å‡∏ï‡∏¥
          const m = moves[0];
          const { error: moveError } = await supabase
            .from("nodes")
            .update({
              selectedcar: formatHouseName(Number(m.house.slice(-2))),
              value: String(m.count),
            })
            .eq("id", nodeId);
          if (moveError) throw moveError;
        }
      }

      alert("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (err) {
      console.error(err);
      if (err instanceof Error) {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + err.message);
      } else {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å");
      }
    }
  };

  return (
    <div>
      <button
        className="p-2 bg-red-500 text-white rounded"
        onClick={handleResetAndUpdate}
      >
        Reset & Update Nodes in MAP
      </button>
      <button
        className="mb-4 p-2 bg-blue-500 text-white rounded"
        onClick={handleCopyPeople}
      >
        ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏ô
      </button>
      <button
        className="mb-4 p-2 bg-purple-600 text-white rounded"
        onClick={handleCopyBoat}
      >
        ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
      </button>
      <a href="#boat" className="bg-purple-500 rounded mb-4 p-2 text-white">
        ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
      </a>
      <a href="#section1" className="bg-green-500 rounded mb-4 p-2 text-white">
        ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏ö
      </a>

      <div className="mb-4 mt-4">
        <label>‡∏î‡∏π‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà: </label>
        <input
          type="number"
          value={round}
          onChange={(e) => setRound(+e.target.value)}
          className="border px-2"
        />
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏π‡πâ */}
      <div className="max-h-[200px] overflow-x-auto mb-4">
        {result.map((item, i) => (
          <div key={i} className="p-2 border rounded mb-1">
            {item.type === "fight" ? (
              <span>
                ‚öîÔ∏è Node {item.node}: Fight between{" "}
                {item.houses
                  .map(
                    (h: { house: string; count: number }) =>
                      `${h.house} (${h.count} ‡∏Ñ‡∏ô)`
                  )
                  .join(", ")}
              </span>
            ) : (
              <span>
                üö∂ Node {item.node}: {item.count} ‡∏Ñ‡∏ô - {item.house}
              </span>
            )}
          </div>
        ))}
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô */}
      <div className="mt-6 overflow-auto mb-6">
        <h3 className="font-bold">Matrix Node-House (‡∏£‡∏≠‡∏ö {round})</h3>
        <button
          className="mb-4 p-2 bg-blue-500 text-white rounded"
          onClick={handleCopyPeople}
        >
          ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏ô
        </button>
        <table className="border-collapse border w-full">
          <thead>
            <tr>
              <th className="border p-2">Node \ ‡∏ö‡πâ‡∏≤‡∏ô</th>
              {houses.map((house) => (
                <th key={house} className="border p-2">
                  {house}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {nodes.map((node) => (
              <tr key={node}>
                <td className="border p-2 font-semibold">Node {node}</td>
                {houses.map((house) => (
                  <td key={house} className="border p-2 text-center">
                    {matrix[node]?.[house] === 0 ? "" : matrix[node]?.[house]}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡∏≠ */}
      <br id="boat" />
      <div className="mb-4 mt-4">
        <label>‡∏î‡∏π‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà: </label>
        <input
          type="number"
          value={round}
          onChange={(e) => setRound(+e.target.value)}
          className="border px-2"
        />
      </div>
      <div className="mt-6 overflow-auto">
        <h3 className="font-bold">‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏∑‡∏≠ (‡∏£‡∏≠‡∏ö {round})</h3>
        <button
          className="mb-4 p-2 bg-purple-600 text-white rounded"
          onClick={handleCopyBoat}
        >
          ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        </button>
        <table className="border-collapse border w-full">
          <thead>
            <tr>
              <th className="border p-2">Node</th>
              <th className="border p-2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡∏≠</th>
              <th className="border p-2">‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡∏≠</th>
            </tr>
          </thead>
          <tbody>
            {nodes.map((node) =>
              boatMatrix[node].length > 0 ? (
                boatMatrix[node].map(({ house, boat }, idx) => (
                  <tr key={`${node}-${idx}`}>
                    <td className="border p-2 text-center">{node}</td>
                    <td className="border p-2 text-center">{boat}</td>
                    <td className="border p-2 text-center">{house}</td>
                  </tr>
                ))
              ) : (
                <tr key={node}>
                  <td className="border p-2 text-center">{node}</td>
                  <td className="border p-2"></td>
                  <td className="border p-2"></td>
                </tr>
              )
            )}
          </tbody>
        </table>
      </div>
      <br id="section1" />
    </div>
  );
}
